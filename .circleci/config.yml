version: 2.1

commands:
  restore_all_caches:
    description: Restore php and javascript dependencies
    steps:
      - restore_cache:
          keys:
          - v1-php-{{ checksum "composer.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-php-

      - restore_cache:
          keys:
          - v1-node-{{ checksum "package-lock.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-node-

  composer:
    description: Ensure all php dependencies are installed
    steps:
      - run:
          name: Run composer install
          command: composer install -n --ignore-platform-reqs --no-progress

  php-cs-fixer:
    description: Ensure php code follows style rules
    steps:
      - run:
          name: Run php-cs-fixer (future mode)
          command: |
            PHP_CS_FIXER_FUTURE_MODE=1
            bin/php-cs-fixer fix --diff --dry-run --verbose || (echo "Coding standards are not respected. Run PHP-CS-Fixer to fix." && exit 1)

  install_node:
    description: Ensure node is installed
    steps:
      - run:
          name: Install node version defined in .node-version
          command: |
            git clone https://github.com/nodenv/node-build.git ../node-build
            sudo ../node-build/install.sh
            sudo node-build $(cat .node-version) /usr/local

  save_all_caches:
    description: Save php and javascript dependencies
    steps:
      - save_cache:
          paths:
            - ./vendor
          key: v1-php-{{ checksum "composer.lock" }}

      - save_cache:
          paths:
            - ./node_modules
          key: v1-node-{{ checksum "package-lock.json" }}

  copy_application_data:
    description: Copy application data from docker to the workspace
    steps:
      - run:
          name: Copy data from docker container
          command: |
            mkdir -p containers/data/mariadb/
            mkdir -p containers/data/elasticsearch/
            docker cp `docker-compose -f containers/docker-compose.yml --project-directory containers ps -q mariadb`:/var/lib/mysql/. containers/data/mariadb/
            docker cp `docker-compose -f containers/docker-compose.yml --project-directory containers ps -q elasticsearch`:/usr/share/elasticsearch/data/. containers/data/elasticsearch/

  store_test_artifacts:
    description: Save artifacts from tests for debug purposes
    steps:
      - run:
          name: Copy artifacts from docker container
          command: |
            docker cp `docker-compose -f containers/docker-compose.yml --project-directory containers ps -q php-fpm`:/var/www/tests/Browser/screenshots/. tests/Browser/screenshots
            docker cp `docker-compose -f containers/docker-compose.yml --project-directory containers ps -q php-fpm`:/var/www/tests/Browser/console/. tests/Browser/console
            docker cp `docker-compose -f containers/docker-compose.yml --project-directory containers ps -q php-fpm`:/var/www/clover.xml clover.xml
          when: on_fail

      - store_artifacts:
          path: tests/Browser/console
          destination: browser-tests/console

      - store_artifacts:
          path: tests/Browser/screenshots
          destination: browser-tests/screenshots

      - store_artifacts:
          path: clover.xml
          destination: unit-tests/coverage/clover.xml

jobs:
  build:
    docker:
      - image: circleci/php:7.3-cli
    environment:
      - APP_ENV: "testing"
    steps:
      - checkout
      - restore_all_caches
      - composer
      - php-cs-fixer
      - install_node
      - save_all_caches
      - setup_remote_docker
      # build
      - run:
          name: Run build task
          command: bin/phing build
      - copy_application_data
      - persist_to_workspace:
          root: .
          paths:
            - containers/data

  test:
    docker:
      - image: circleci/php:7.3-cli
    environment:
      - APP_ENV: "testing"
    steps:
      - checkout
      - restore_all_caches
      - composer
      - install_node
      - attach_workspace:
          at: .
      - setup_remote_docker
      # prepare
      - run:
          name: Run prepare task
          command: bin/phing prepare
      # start
      - run:
          name: Run start task
          command: bin/phing start
      # test
      - run:
          name: Run phpunit tests
          command: bin/phing test
      - store_test_artifacts

  browser-test:
    docker:
      - image: circleci/php:7.3-cli
    environment:
      - APP_ENV: "testing"
    steps:
      - checkout
      - restore_all_caches
      - composer
      - install_node
      - attach_workspace:
          at: .
      - setup_remote_docker
      # prepare
      - run:
          name: Run prepare task
          command: bin/phing prepare
       # start
      - run:
          name: Run start task
          command: bin/phing start
      # browser test
      - run:
          name: Run dusk tests
          command: bin/phing browser-test
      - store_test_artifacts

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - browser-test:
          requires:
            - build
