version: '2'

services:

### Application Code Container #############################

    application:

### Workspace Utilities Container ###########################

    workspace:
      build:
        context: ./workspace
        args:
          - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
          - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
          - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
          - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
          - INSTALL_DUSK_DEPS=${WORKSPACE_INSTALL_DUSK_DEPS}
          - CHROME_BROWSER_CHANNEL=${WORKSPACE_CHROME_BROWSER_CHANNEL}
          - CHROME_DRIVER_VERSION=${WORKSPACE_CHROME_DRIVER_VERSION}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - TZ=${WORKSPACE_TIMEZONE}
      volumes_from:
        - application
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
      tty: true
      networks:
        - frontend
        - backend

### PHP-FPM Container #######################################

    php-fpm:
      build:
        context: ./php-fpm
        args:
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
      volumes_from:
        - application
        - matomo
      expose:
        - "9000"
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      networks:
        - backend

### Queue-Worker Container ##################################

    queue-worker:
      build:
        context: ./queue-worker
      volumes_from:
        - application
      depends_on:
        - workspace
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      networks:
        - backend

### NGINX Server Container ##################################

    nginx:
      build:
        context: ./nginx
        args:
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
      volumes_from:
        - application
        - matomo
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
        - "8090:8090"
        - "9443:9443"
      depends_on:
        - php-fpm
        - matomo
      networks:
        - frontend
        - backend

### MariaDB Container #######################################

    mariadb:
      image: mariadb
      volumes:
        - ${DATA_SAVE_PATH}/mariadb:/var/lib/mysql
      volumes_from:
        - matomo
      ports:
        - "${MARIADB_PORT}:3306"
      environment:
        - MYSQL_DATABASE=${MARIADB_DATABASE}
        - MYSQL_USER=${MARIADB_USER}
        - MYSQL_PASSWORD=${MARIADB_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      networks:
        - backend

### phpMyAdmin Container ####################################

    phpmyadmin:
      image: phpmyadmin/phpmyadmin
      environment:
        - PMA_HOST=mariadb
        - PMA_USER=root
        - PMA_PASSWORD=${MARIADB_ROOT_PASSWORD}
      ports:
        - "${PMA_PORT}:80"
      depends_on:
        - mariadb
      networks:
        - frontend
        - backend

### Matomo Container ########################################

    matomo:
      build:
        context: ./matomo
        args:
          - DB_PASSWORD=${MARIADB_ROOT_PASSWORD}
          - MATOMO_ROOT_USER=${MATOMO_ROOT_USER}
          - MATOMO_ROOT_PASSWORD=${MATOMO_ROOT_PASSWORD}
          - MATOMO_ROOT_APIKEY=${MATOMO_ROOT_APIKEY}
      networks:
        - backend

### Redis Container #########################################

    redis:
      image: redislabs/redisearch:latest
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend

### Mailhog Container #########################################

    mailhog:
      image: mailhog/mailhog
      ports:
        - "1025:1025"
        - "8025:8025"
      networks:
        - frontend
        - backend

### SPID Test Environment #####################################

    spid-testenv:
      image: italia/spid-testenv2
      volumes:
        - ./spid-testenv/conf:/app/conf
      ports:
        - "${SPID_TESTENV_PORT}:8088"
      networks:
        - frontend

### Networks Setup ############################################

networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"

### Volumes Setup #############################################

volumes:
  redis:
    driver: "local"
  mariadb:
    driver: "local"
