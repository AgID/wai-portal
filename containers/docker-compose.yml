version: '3.7'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  matomo:
    driver: local
  matomo-install:
    driver: local
  mariadb-data:
    driver: local
  elasticsearch-data:
    driver: local
  pg-data:
    driver: local

services:
# php-fpm
  php-fpm:
    image: wai-php-fpm:dev
    build:
      context: ./php-fpm
      args:
        - ENV=${ENV}
        - PHP_VERSION=${PHP_VERSION}
        - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
        - APP_CODE_PATH_CONTAINER=${APP_CODE_PATH_CONTAINER}
        # uncomment if queued tracking plugin is enabled in matomo
        # - MATOMO_PHPREDIS_VERSION=${MATOMO_PHPREDIS_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ${APP_LOGS_PATH_HOST}/php:${APP_LOGS_PATH_CONTAINER}/php
      - ${APP_LOGS_PATH_HOST}/matomo:${APP_LOGS_PATH_CONTAINER}/matomo
      - matomo:/opt/matomo/
      #Â - ./matomo/wai-matomo-theme/dist/WAIMatomoTheme:/opt/matomo/plugins/WAIMatomoTheme
    expose:
      - "9000"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend

# queue-worker
  queue-worker:
    image: wai-queue-worker:dev
    build:
      context: ./queue-worker
      args:
        - PHP_VERSION=${PHP_VERSION}
        - APP_CODE_PATH_CONTAINER=${APP_CODE_PATH_CONTAINER}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ${APP_LOGS_PATH_HOST}/php:${APP_LOGS_PATH_CONTAINER}/php
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    depends_on:
      - php-fpm
    networks:
      - backend

# nginx
  nginx:
    image: wai-nginx:dev
    build:
      context: ./nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - ALLOWED_ANCESTORS=${ALLOWED_ANCESTORS}
    volumes:
      - type: bind
        source: ${APP_CODE_PATH_HOST}
        target: ${APP_CODE_PATH_CONTAINER}
        volume:
          nocopy: true
      - ${APP_LOGS_PATH_HOST}/nginx:${APP_LOGS_PATH_CONTAINER}/nginx
      - matomo:/opt/matomo/
    ports:
      - "${NGINX_PORTAL_HTTP_PORT}:80"
      - "${NGINX_PORTAL_HTTPS_PORT}:443"
      - "${NGINX_MATOMO_HTTP_PORT}:8090"
      - "${NGINX_MATOMO_HTTPS_PORT}:9443"
    depends_on:
      - php-fpm
      - matomo
    networks:
      - frontend
      - backend

# mariadb
  mariadb:
    image: bitnami/mariadb
    volumes:
      - mariadb-data:/bitnami/mariadb
      - matomo-install:/opt/matomo-install/
      # uncomment to enable the general query log
      # - ./mariadb/my_custom.cnf:/opt/bitnami/mariadb/conf/my_custom.cnf:ro
      - ${APP_LOGS_PATH_HOST}/mariadb:${APP_LOGS_PATH_CONTAINER}/mariadb
    environment:
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    networks:
      - backend

# phpmyadmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      - PMA_HOST=mariadb
      - PMA_USER=root
      - PMA_PASSWORD=${MARIADB_ROOT_PASSWORD}
    ports:
      - "${PMA_PORT}:80"
    depends_on:
      - mariadb
    networks:
      - frontend
      - backend

# matomo
  matomo:
    image: wai-matomo:dev
    build:
      context: ./matomo
      args:
        - DB_PASSWORD=${MARIADB_ROOT_PASSWORD}
        - MATOMO_DB_READER=${MATOMO_DB_READER}
        - MATOMO_DB_USER=${MATOMO_DB_USER}
        - MATOMO_DB_PASSWORD=${MATOMO_DB_PASSWORD}
        - MATOMO_ROOT_USER=${MATOMO_ROOT_USER}
        - MATOMO_ROOT_PASSWORD=${MATOMO_ROOT_PASSWORD}
        - MATOMO_ROOT_APIKEY=${MATOMO_ROOT_APIKEY}
        - MATOMO_VERSION=${MATOMO_VERSION}
        - MATOMO_WAI_THEME_VERSION=${MATOMO_WAI_THEME_VERSION}
        - MATOMO_WAI_URL=${MATOMO_WAI_URL}
        - MATOMO_CRON_ARCHIVING_ENABLED=${MATOMO_CRON_ARCHIVING_ENABLED}
        - MATOMO_PLUGIN_DISABLESITETRACKING_VERSION=${MATOMO_PLUGIN_DISABLESITETRACKING_VERSION}
        - MATOMO_PLUGIN_CUSTOMDIMENSIONS_VERSION=${MATOMO_PLUGIN_CUSTOMDIMENSIONS_VERSION}
        - MATOMO_PLUGIN_VISITORGENERATOR_VERSION=${MATOMO_PLUGIN_VISITORGENERATOR_VERSION}
        - MATOMO_PLUGIN_RESETDATABASE_VERSION=${MATOMO_PLUGIN_RESETDATABASE_VERSION}
        - MATOMO_PLUGIN_SUPERUSERONLYRESTRICTIONS_VERSION=${MATOMO_PLUGIN_SUPERUSERONLYRESTRICTIONS_VERSION}
        - MATOMO_PLUGIN_SUPERUSERONLYRESTRICTIONS_ENABLED=${MATOMO_PLUGIN_SUPERUSERONLYRESTRICTIONS_ENABLED}
        - MATOMO_PLUGIN_UPDATEEXPOSEDFQDNLIST_VERSION=${MATOMO_PLUGIN_UPDATEEXPOSEDFQDNLIST_VERSION}
        - MATOMO_PLUGIN_UPDATEEXPOSEDFQDNLIST_REDIS_HOST=${MATOMO_PLUGIN_UPDATEEXPOSEDFQDNLIST_REDIS_HOST}
        - MATOMO_PLUGIN_UPDATEEXPOSEDFQDNLIST_REDIS_PORT=${MATOMO_PLUGIN_UPDATEEXPOSEDFQDNLIST_REDIS_PORT}
        - MATOMO_PLUGIN_UPDATEEXPOSEDFQDNLIST_REDIS_DB_INDEX=${MATOMO_PLUGIN_UPDATEEXPOSEDFQDNLIST_REDIS_DB_INDEX}
        # - MATOMO_PLUGIN_QUEUEDTRACKING_VERSION=${MATOMO_PLUGIN_QUEUEDTRACKING_VERSION}
        # - MATOMO_PLUGIN_PROTECTTRACKID_VERSION=${MATOMO_PLUGIN_PROTECTTRACKID_VERSION}
        # - MATOMO_PLUGIN_LOGINFILTERIP_VERSION=${MATOMO_PLUGIN_LOGINFILTERIP_VERSION}
        # - MATOMO_PLUGIN_TRACKERHOSTNAME_VERSION=${MATOMO_PLUGIN_TRACKERHOSTNAME_VERSION}
        # - MATOMO_INGESTION_HOSTNAME=${MATOMO_INGESTION_HOSTNAME}
    volumes:
      - matomo:/opt/matomo/
      - matomo-install:/opt/matomo-install/
    networks:
      - backend

# redis
  redis:
    image: redislabs/redisearch:latest
    networks:
      - backend

# ipa-redisearch
  ipa-redisearch:
    image: webanalyticsitalia/wai-ipa-redisearch:5.0.12-stable
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - backend

# mailhog
  mailhog:
    image: mailhog/mailhog
    ports:
      - "${MAILHOG_HTTP_PORT}:8025"
    networks:
      - frontend
      - backend

# spid-testenv
  spid-testenv:
    build:
      context: ./spid-testenv
      args:
        - SPID_TESTENV_VERSION=1.0.1
    volumes:
      - ./spid-testenv/conf:/app/conf
    ports:
      - "${SPID_TESTENV_PORT}:8088"
    networks:
      - frontend

# elasticsearch
  elasticsearch:
    image: wai-elasticsearch:dev
    build:
      context: ./elasticsearch
      args:
        - ELASTICSEARCH_VERSION=${ELASTICSEARCH_VERSION}
        - ELASTICSEARCH_INDEX_TEMPLATE_NAME=${ELASTICSEARCH_INDEX_TEMPLATE_NAME}
        - ELASTICSEARCH_SEARCH_TEMPLATE_NAME=${ELASTICSEARCH_SEARCH_TEMPLATE_NAME}
    environment:
      - node.name=elastic01
      - cluster.name=wai-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TAKE_FILE_OWNERSHIP=1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - backend

# kibana
  kibana:
    image: wai-kibana:dev
    build:
      context: ./kibana
      args:
        - KIBANA_VERSION=${KIBANA_VERSION}
        - ELASTICSEARCH_INDEX_PREFIX=${ELASTICSEARCH_INDEX_PREFIX}
    environment:
      - SERVER_NAME=kibana01
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT}:5601"
    networks:
      - frontend
      - backend

# redis-sentinel
  redis-sentinel:
    image: wai-redis-sentinel:dev
    depends_on:
      - redis
    build:
      context: ./redis-sentinel
      args:
        - REDIS_SENTINEL_SET=${REDIS_SENTINEL_SET}
        - REDIS_IPA_INDEX_SENTINEL_SET=${REDIS_IPA_INDEX_SENTINEL_SET}
    networks:
      - backend

# redis-commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=redis
    ports:
      - "8081:8081"
    networks:
      - backend

# postgres
  postgres:
    image: postgres:9.6
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend
    volumes:
      - pg-data:/var/lib/postgresql/data

# kong
  kong:
    image: wai-kong:dev
    build:
      context: ./kong
      args:
        - KONG_VERSION=${KONG_VERSION}
    depends_on:
      - postgres
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_DATABASE=${POSTGRES_DATABASE}
      - KONG_PG_USER=${POSTGRES_USER}
      - KONG_PG_PASSWORD=${POSTGRES_PASSWORD}
      - KONG_PG_HOST=postgres
      - KONG_LOG_LEVEL=info
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001,0.0.0.0:8444 ssl
    networks:
      - backend
    ports:
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
