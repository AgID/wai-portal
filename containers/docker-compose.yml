version: '3.7'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  matomo:
    driver: local
  matomo-install:
    driver: local

services:
# php-fpm
  php-fpm:
    image: wai-php-fpm:dev
    build:
      context: ./php-fpm
      args:
        - ENV=${ENV}
        - PHP_VERSION=${PHP_VERSION}
        - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ${APP_LOGS_PATH_HOST}:${APP_LOGS_PATH_CONTAINER}
      - matomo:/opt/matomo/
    expose:
      - "9000"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend

# queue-worker
  queue-worker:
    image: wai-queue-worker:dev
    build:
      context: ./queue-worker
      args:
        - PHP_VERSION=${PHP_VERSION}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ${APP_LOGS_PATH_HOST}:${APP_LOGS_PATH_CONTAINER}
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    depends_on:
      - php-fpm
    networks:
      - backend

# nginx
  nginx:
    image: wai-nginx:dev
    build:
      context: ./nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
    volumes:
      - type: bind
        source: ${APP_CODE_PATH_HOST}
        target: ${APP_CODE_PATH_CONTAINER}
        volume:
          nocopy: true
      - ${APP_LOGS_PATH_HOST}:${APP_LOGS_PATH_CONTAINER}
      - matomo:/opt/matomo/
    ports:
      - "${NGINX_PORTAL_HTTP_PORT}:80"
      - "${NGINX_PORTAL_HTTPS_PORT}:443"
      - "${NGINX_MATOMO_HTTP_PORT}:8090"
      - "${NGINX_MATOMO_HTTPS_PORT}:9443"
    depends_on:
      - php-fpm
      - matomo
    networks:
      - frontend
      - backend

# mariadb
  mariadb:
    image: mariadb
    volumes:
      - ${DATA_PATH_HOST}/mariadb:/var/lib/mysql
      - ${APP_LOGS_PATH_HOST}:${APP_LOGS_PATH_CONTAINER}
      - matomo-install:/opt/matomo-install/
    environment:
      - MYSQL_DATABASE=${MARIADB_DATABASE}
      - MYSQL_USER=${MARIADB_USER}
      - MYSQL_PASSWORD=${MARIADB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    networks:
      - backend

# phpmyadmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      - PMA_HOST=mariadb
      - PMA_USER=root
      - PMA_PASSWORD=${MARIADB_ROOT_PASSWORD}
    ports:
      - "${PMA_PORT}:80"
    depends_on:
      - mariadb
    networks:
      - frontend
      - backend

# matomo
  matomo:
    image: wai-matomo:dev
    build:
      context: ./matomo
      args:
        - DB_PASSWORD=${MARIADB_ROOT_PASSWORD}
        - MATOMO_DB_READER=${MATOMO_DB_READER}
        - MATOMO_DB_USER=${MATOMO_DB_USER}
        - MATOMO_DB_PASSWORD=${MATOMO_DB_PASSWORD}
        - MATOMO_ROOT_USER=${MATOMO_ROOT_USER}
        - MATOMO_ROOT_PASSWORD=${MATOMO_ROOT_PASSWORD}
        - MATOMO_ROOT_APIKEY=${MATOMO_ROOT_APIKEY}
        - MATOMO_VERSION=${MATOMO_VERSION}
        - MATOMO_WAI_THEME_VERSION=${MATOMO_WAI_THEME_VERSION}
        - MATOMO_PLUGIN_DISABLESITETRACKING_VERSION=${MATOMO_PLUGIN_DISABLESITETRACKING_VERSION}
        - MATOMO_WAI_URL=${MATOMO_WAI_URL}
    volumes:
      - matomo:/opt/matomo/
      - matomo-install:/opt/matomo-install/
    networks:
      - backend

# redis
  redis:
    image: redislabs/redisearch:latest
    networks:
      - backend

# ipa-redisearch
  ipa-redisearch:
    image: webanalyticsitalia/wai-ipa-redisearch:stable
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - backend

# mailhog
  mailhog:
    image: mailhog/mailhog
    ports:
      - "${MAILHOG_HTTP_PORT}:8025"
    networks:
      - frontend
      - backend

# spid-testenv
  spid-testenv:
    image: italia/spid-testenv2
    volumes:
      - ./spid-testenv/conf:/app/conf
    ports:
      - "${SPID_TESTENV_PORT}:8088"
    networks:
      - frontend

# ElasticSearch
  elasticsearch:
    image: wai-elasticsearch:dev
    build:
      context: ./elasticsearch
      args:
        - ELASTICSEARCH_VERSION=${ELASTICSEARCH_VERSION}
        - ELASTICSEARCH_INDEX_NAME=${ELASTICSEARCH_INDEX_NAME}
        - ELASTICSEARCH_SEARCH_TEMPLATE_NAME=${ELASTICSEARCH_SEARCH_TEMPLATE_NAME}
    environment:
      - node.name=elastic01
      - cluster.name=wai-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TAKE_FILE_OWNERSHIP=1
    volumes:
      - ${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - backend

  kibana:
    image: wai-kibana:dev
    build:
      context: ./kibana
      args:
        - KIBANA_VERSION=${KIBANA_VERSION}
        - ELASTICSEARCH_INDEX_PREFIX=${ELASTICSEARCH_INDEX_PREFIX}
    environment:
      - SERVER_NAME=kibana01
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT}:5601"
    networks:
      - frontend
      - backend

# Redis Sentinel
  redis-sentinel:
    image: wai-redis-sentinel:dev
    depends_on:
      - redis
    build:
      context: ./redis-sentinel
      args:
        - REDIS_SENTINEL_SET=${REDIS_SENTINEL_SET}
        - REDIS_IPA_INDEX_SENTINEL_SET=${REDIS_IPA_INDEX_SENTINEL_SET}
    networks:
      - backend
